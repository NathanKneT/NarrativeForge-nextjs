name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  workflow_dispatch:

# Sets permissions for GitHub token
permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write
  checks: write

# Prevent concurrent runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Validation job - TypeScript, ESLint, Tests
  validate:
    name: 🔍 Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run pre-build validation
        run: npm run validate:pre-build

  # Build job
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1

      - name: Run post-build validation
        run: npm run validate

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            .next/
            public/
          retention-days: 7

  # Security audit job
  security:
    name: 🔒 Security
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level high
        continue-on-error: true

  # Docker build job (only on master, simplified)
  docker:
    name: 🐳 Docker
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (test only)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: asylum-story:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Test deployment readiness
  deployment-test:
    name: 🚀 Deployment Test
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files

      - name: Test server startup
        run: |
          npm start &
          SERVER_PID=$!
          sleep 15
          
          # Test if server is responding
          if curl -f -s http://localhost:3000 > /dev/null; then
            echo "✅ Server is responding"
          else
            echo "❌ Server not responding"
            exit 1
          fi
          
          # Test health endpoint
          if curl -f -s http://localhost:3000/api/health > /dev/null; then
            echo "✅ Health endpoint working"
          else
            echo "⚠️ Health endpoint not available"
          fi
          
          # Cleanup
          kill $SERVER_PID
        timeout-minutes: 5

  # Summary job
  summary:
    name: 📋 Summary
    runs-on: ubuntu-latest
    needs: [validate, build, security, docker, deployment-test]
    if: always()
    
    steps:
      - name: Check results
        run: |
          echo "🔍 Validation: ${{ needs.validate.result }}"
          echo "🏗️ Build: ${{ needs.build.result }}"
          echo "🔒 Security: ${{ needs.security.result }}"
          echo "🐳 Docker: ${{ needs.docker.result }}"
          echo "🚀 Deployment Test: ${{ needs.deployment-test.result }}"
          
          if [[ "${{ needs.validate.result }}" == "success" && "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ CI/CD Pipeline completed successfully!"
            echo "🚀 Ready for production deployment!"
          else
            echo "❌ CI/CD Pipeline failed"
            exit 1
          fi