name: 🚀 Asylum Interactive - CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

# Environment variables
env:
  NODE_VERSION: '18'
  CACHE_VERSION: 'v1'

jobs:
  # 🔧 PHASE 1: CODE QUALITY & LINTING
  quality-check:
    name: 📝 Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔍 Run ESLint
        run: npm run lint

      - name: 🎨 Check Prettier formatting
        run: npm run format:check

      - name: 📏 TypeScript type checking
        run: npm run type-check

      - name: 📊 Upload lint results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-results
          path: |
            eslint-report.json
            prettier-check.log
          retention-days: 7

  # 🔧 PHASE 2: TESTING SUITE
  test-suite:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        test-type: [unit, integration]
        
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🧪 Run tests with coverage
        run: npm run test:ci
        env:
          CI: true

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            test-results/
            coverage/
          retention-days: 30

      - name: 📈 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.test-type == 'unit'
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: asylum-coverage
          fail_ci_if_error: false

  # 🔧 PHASE 3: BUILD & BUNDLE ANALYSIS
  build-analysis:
    name: 🏗️ Build & Bundle Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [quality-check]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🏗️ Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: 📊 Analyze bundle size
        run: npm run build:analyze
        continue-on-error: true

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .next/
            !.next/cache
          retention-days: 7

      - name: 💾 Cache build
        uses: actions/cache@v3
        with:
          path: .next
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx') }}

  # 🔧 PHASE 4: SECURITY AUDIT
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🛡️ Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: 🔍 Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium

  # 🔧 PHASE 5: E2E TESTING (Conditional)
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [build-analysis]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 📦 Install Playwright browsers
        run: npx playwright install --with-deps

      - name: 🏗️ Build application
        run: npm run build

      - name: 🚀 Start application
        run: npm run start &
        env:
          PORT: 3000

      - name: ⏳ Wait for application
        run: npx wait-on http://localhost:3000

      - name: 🎭 Run Playwright tests
        run: npm run test:e2e
        env:
          BASE_URL: http://localhost:3000

      - name: 📊 Upload E2E results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  # 🔧 PHASE 6: COMPREHENSIVE VALIDATION
  comprehensive-validation:
    name: 🔍 Comprehensive Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [quality-check, test-suite, build-analysis, security-audit]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔍 Run enhanced validation
        run: node scripts/validate-build-enhanced.js

      - name: 📊 Upload validation report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: validation-report
          path: validation-report-enhanced.json
          retention-days: 30

      - name: 💬 Comment validation results on PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            try {
              const report = JSON.parse(fs.readFileSync('validation-report-enhanced.json', 'utf8'));
              const score = report.score;
              const emoji = score >= 90 ? '🚀' : score >= 80 ? '✅' : score >= 70 ? '⚠️' : '❌';
              
              const comment = `${emoji} **Validation Report**
              
              **Score: ${score}/100**
              - ✅ Passed: ${report.summary.passed}
              - ⚠️ Warnings: ${report.summary.warnings} 
              - ❌ Failed: ${report.summary.failed}
              
              ${score >= 85 ? '🎉 Great job! Ready for review.' : '🔧 Some improvements needed before merge.'}
              
              <details>
              <summary>📊 Detailed Results</summary>
              
              ${report.results.map(r => `- ${r.status === 'PASS' ? '✅' : r.status === 'WARN' ? '⚠️' : '❌'} ${r.check}`).join('\n')}
              </details>`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Could not post validation results:', error.message);
            }

  # 🔧 PHASE 7: PERFORMANCE MONITORING
  performance-monitoring:
    name: ⚡ Performance Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build-analysis]
    if: github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🏗️ Build for performance test
        run: npm run build

      - name: ⚡ Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouse.config.js'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # 🔧 PHASE 8: DEPLOYMENT (Production)
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [comprehensive-validation, e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🏗️ Build for production
        run: npm run build
        env:
          NODE_ENV: production

      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

      - name: 🎉 Deployment success notification
        if: success()
        run: |
          echo "🎉 Successfully deployed to production!"
          echo "🔗 URL: https://asylum-interactive.vercel.app"

  # 🔧 PHASE 9: POST-DEPLOYMENT HEALTH CHECK
  health-check:
    name: 🏥 Health Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 🏥 Check application health
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
          
          # Health check
          response=$(curl -s -o /dev/null -w "%{http_code}" https://asylum-interactive.vercel.app/api/health)
          if [ $response -eq 200 ]; then
            echo "✅ Health check passed!"
          else
            echo "❌ Health check failed with status: $response"
            exit 1
          fi

      - name: 🔍 Basic smoke test
        run: |
          # Test main page loads
          curl -f https://asylum-interactive.vercel.app/ > /dev/null
          echo "✅ Main page loads successfully"
          
          # Test editor page loads  
          curl -f https://asylum-interactive.vercel.app/editor > /dev/null
          echo "✅ Editor page loads successfully"

# 📊 Workflow Summary
  workflow-summary:
    name: 📊 Workflow Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [quality-check, test-suite, build-analysis, security-audit, comprehensive-validation]
    
    steps:
      - name: 📋 Generate summary
        run: |
          echo "## 🚀 Asylum Interactive CI/CD Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Phase | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.quality-check.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test-suite.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build-analysis.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security-audit.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Validation | ${{ needs.comprehensive-validation.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps:** Check individual job outputs for detailed results." >> $GITHUB_STEP_SUMMARY